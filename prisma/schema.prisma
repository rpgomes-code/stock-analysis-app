// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  watchlists    Watchlist[]
  portfolios    Portfolio[]
  alerts        Alert[]
  notes         StockNote[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Watchlist {
  id        String   @id @default(cuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stocks    Stock[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stock {
  id          String      @id @default(cuid())
  symbol      String
  watchlistId String
  watchlist   Watchlist   @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
  portfolioId String?
  portfolio   Portfolio?  @relation(fields: [portfolioId], references: [id])
  notes       StockNote[]
  alerts      Alert[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Portfolio {
  id                String   @id @default(cuid())
  name              String
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stocks            Stock[]
  initialInvestment Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model StockTransaction {
  id          String   @id @default(cuid())
  stockSymbol String
  quantity    Float
  price       Float
  type        String // "BUY" or "SELL"
  timestamp   DateTime @default(now())
  portfolioId String
  // portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}

model Alert {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stockId   String
  stock     Stock    @relation(fields: [stockId], references: [id], onDelete: Cascade)
  type      String // "PRICE_ABOVE", "PRICE_BELOW", "VOLUME_ABOVE", etc.
  value     Float
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StockNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stockId   String
  stock     Stock    @relation(fields: [stockId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
